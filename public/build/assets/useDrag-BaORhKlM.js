import{e as m}from"./index-BSWw-p5k.js";import{r as s}from"./index-BH53Isel.js";const I=s.createContext({dragDropManager:void 0});function c(r,e,...t){if(P()&&e===void 0)throw new Error("invariant requires an error message argument");if(!r){let n;if(e===void 0)n=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{let i=0;n=new Error(e.replace(/%s/g,function(){return t[i++]})),n.name="Invariant Violation"}throw n.framesToPop=1,n}}function P(){return typeof process<"u"&&!0}const d=typeof window<"u"?s.useLayoutEffect:s.useEffect;function O(r,e,t){const[n,i]=s.useState(()=>e(r)),o=s.useCallback(()=>{const a=e(r);m(n,a)||(i(a),t&&t())},[n,r,t]);return d(o),[n,o]}function y(r,e,t){const[n,i]=O(r,e,t);return d(function(){const a=r.getHandlerId();if(a!=null)return r.subscribeToStateChange(i,{handlerIds:[a]})},[r,i]),n}function b(r,e,t){return y(e,r||(()=>({})),()=>t.reconnect())}function M(r,e){const t=[];return typeof r!="function"&&t.push(r),s.useMemo(()=>typeof r=="function"?r():r,t)}function R(r){return s.useMemo(()=>r.hooks.dragSource(),[r])}function T(r){return s.useMemo(()=>r.hooks.dragPreview(),[r])}let h=!1,f=!1;class E{receiveHandlerId(e){this.sourceId=e}getHandlerId(){return this.sourceId}canDrag(){c(!h,"You may not call monitor.canDrag() inside your canDrag() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");try{return h=!0,this.internalMonitor.canDragSource(this.sourceId)}finally{h=!1}}isDragging(){if(!this.sourceId)return!1;c(!f,"You may not call monitor.isDragging() inside your isDragging() implementation. Read more: http://react-dnd.github.io/react-dnd/docs/api/drag-source-monitor");try{return f=!0,this.internalMonitor.isDraggingSource(this.sourceId)}finally{f=!1}}subscribeToStateChange(e,t){return this.internalMonitor.subscribeToStateChange(e,t)}isDraggingSource(e){return this.internalMonitor.isDraggingSource(e)}isOverTarget(e,t){return this.internalMonitor.isOverTarget(e,t)}getTargetIds(){return this.internalMonitor.getTargetIds()}isSourcePublic(){return this.internalMonitor.isSourcePublic()}getSourceId(){return this.internalMonitor.getSourceId()}subscribeToOffsetChange(e){return this.internalMonitor.subscribeToOffsetChange(e)}canDragSource(e){return this.internalMonitor.canDragSource(e)}canDropOnTarget(e){return this.internalMonitor.canDropOnTarget(e)}getItemType(){return this.internalMonitor.getItemType()}getItem(){return this.internalMonitor.getItem()}getDropResult(){return this.internalMonitor.getDropResult()}didDrop(){return this.internalMonitor.didDrop()}getInitialClientOffset(){return this.internalMonitor.getInitialClientOffset()}getInitialSourceClientOffset(){return this.internalMonitor.getInitialSourceClientOffset()}getSourceClientOffset(){return this.internalMonitor.getSourceClientOffset()}getClientOffset(){return this.internalMonitor.getClientOffset()}getDifferenceFromInitialOffset(){return this.internalMonitor.getDifferenceFromInitialOffset()}constructor(e){this.sourceId=null,this.internalMonitor=e.getMonitor()}}function J(r,e,t){const n=t.getRegistry(),i=n.addTarget(r,e);return[i,()=>n.removeTarget(i)]}function H(r,e,t){const n=t.getRegistry(),i=n.addSource(r,e);return[i,()=>n.removeSource(i)]}function D(r,e,t,n){let i;if(i!==void 0)return!!i;if(r===e)return!0;if(typeof r!="object"||!r||typeof e!="object"||!e)return!1;const o=Object.keys(r),a=Object.keys(e);if(o.length!==a.length)return!1;const l=Object.prototype.hasOwnProperty.bind(e);for(let u=0;u<o.length;u++){const g=o[u];if(!l(g))return!1;const w=r[g],C=e[g];if(i=void 0,i===!1||i===void 0&&w!==C)return!1}return!0}function S(r){return r!==null&&typeof r=="object"&&Object.prototype.hasOwnProperty.call(r,"current")}function k(r){if(typeof r.type=="string")return;const e=r.type.displayName||r.type.name||"the component";throw new Error(`Only native element nodes can now be passed to React DnD connectors.You can either wrap ${e} into a <div>, or turn it into a drag source or a drop target itself.`)}function x(r){return(e=null,t=null)=>{if(!s.isValidElement(e)){const o=e;return r(o,t),o}const n=e;return k(n),U(n,t?o=>r(o,t):r)}}function N(r){const e={};return Object.keys(r).forEach(t=>{const n=r[t];if(t.endsWith("Ref"))e[t]=r[t];else{const i=x(n);e[t]=()=>i}}),e}function v(r,e){typeof r=="function"?r(e):r.current=e}function U(r,e){const t=r.ref;return c(typeof t!="string","Cannot connect React DnD to an element with an existing string ref. Please convert it to use a callback ref instead, or wrap it into a <span> or <div>. Read more: https://reactjs.org/docs/refs-and-the-dom.html#callback-refs"),t?s.cloneElement(r,{ref:n=>{v(t,n),v(e,n)}}):s.cloneElement(r,{ref:e})}class q{receiveHandlerId(e){this.handlerId!==e&&(this.handlerId=e,this.reconnect())}get connectTarget(){return this.dragSource}get dragSourceOptions(){return this.dragSourceOptionsInternal}set dragSourceOptions(e){this.dragSourceOptionsInternal=e}get dragPreviewOptions(){return this.dragPreviewOptionsInternal}set dragPreviewOptions(e){this.dragPreviewOptionsInternal=e}reconnect(){const e=this.reconnectDragSource();this.reconnectDragPreview(e)}reconnectDragSource(){const e=this.dragSource,t=this.didHandlerIdChange()||this.didConnectedDragSourceChange()||this.didDragSourceOptionsChange();return t&&this.disconnectDragSource(),this.handlerId?e?(t&&(this.lastConnectedHandlerId=this.handlerId,this.lastConnectedDragSource=e,this.lastConnectedDragSourceOptions=this.dragSourceOptions,this.dragSourceUnsubscribe=this.backend.connectDragSource(this.handlerId,e,this.dragSourceOptions)),t):(this.lastConnectedDragSource=e,t):t}reconnectDragPreview(e=!1){const t=this.dragPreview,n=e||this.didHandlerIdChange()||this.didConnectedDragPreviewChange()||this.didDragPreviewOptionsChange();if(n&&this.disconnectDragPreview(),!!this.handlerId){if(!t){this.lastConnectedDragPreview=t;return}n&&(this.lastConnectedHandlerId=this.handlerId,this.lastConnectedDragPreview=t,this.lastConnectedDragPreviewOptions=this.dragPreviewOptions,this.dragPreviewUnsubscribe=this.backend.connectDragPreview(this.handlerId,t,this.dragPreviewOptions))}}didHandlerIdChange(){return this.lastConnectedHandlerId!==this.handlerId}didConnectedDragSourceChange(){return this.lastConnectedDragSource!==this.dragSource}didConnectedDragPreviewChange(){return this.lastConnectedDragPreview!==this.dragPreview}didDragSourceOptionsChange(){return!D(this.lastConnectedDragSourceOptions,this.dragSourceOptions)}didDragPreviewOptionsChange(){return!D(this.lastConnectedDragPreviewOptions,this.dragPreviewOptions)}disconnectDragSource(){this.dragSourceUnsubscribe&&(this.dragSourceUnsubscribe(),this.dragSourceUnsubscribe=void 0)}disconnectDragPreview(){this.dragPreviewUnsubscribe&&(this.dragPreviewUnsubscribe(),this.dragPreviewUnsubscribe=void 0,this.dragPreviewNode=null,this.dragPreviewRef=null)}get dragSource(){return this.dragSourceNode||this.dragSourceRef&&this.dragSourceRef.current}get dragPreview(){return this.dragPreviewNode||this.dragPreviewRef&&this.dragPreviewRef.current}clearDragSource(){this.dragSourceNode=null,this.dragSourceRef=null}clearDragPreview(){this.dragPreviewNode=null,this.dragPreviewRef=null}constructor(e){this.hooks=N({dragSource:(t,n)=>{this.clearDragSource(),this.dragSourceOptions=n||null,S(t)?this.dragSourceRef=t:this.dragSourceNode=t,this.reconnectDragSource()},dragPreview:(t,n)=>{this.clearDragPreview(),this.dragPreviewOptions=n||null,S(t)?this.dragPreviewRef=t:this.dragPreviewNode=t,this.reconnectDragPreview()}}),this.handlerId=null,this.dragSourceRef=null,this.dragSourceOptionsInternal=null,this.dragPreviewRef=null,this.dragPreviewOptionsInternal=null,this.lastConnectedHandlerId=null,this.lastConnectedDragSource=null,this.lastConnectedDragSourceOptions=null,this.lastConnectedDragPreview=null,this.lastConnectedDragPreviewOptions=null,this.backend=e}}function p(){const{dragDropManager:r}=s.useContext(I);return c(r!=null,"Expected drag drop context"),r}function F(r,e){const t=p(),n=s.useMemo(()=>new q(t.getBackend()),[t]);return d(()=>(n.dragSourceOptions=r||null,n.reconnect(),()=>n.disconnectDragSource()),[n,r]),d(()=>(n.dragPreviewOptions=e||null,n.reconnect(),()=>n.disconnectDragPreview()),[n,e]),n}function V(){const r=p();return s.useMemo(()=>new E(r),[r])}class Y{beginDrag(){const e=this.spec,t=this.monitor;let n=null;return typeof e.item=="object"?n=e.item:typeof e.item=="function"?n=e.item(t):n={},n??null}canDrag(){const e=this.spec,t=this.monitor;return typeof e.canDrag=="boolean"?e.canDrag:typeof e.canDrag=="function"?e.canDrag(t):!0}isDragging(e,t){const n=this.spec,i=this.monitor,{isDragging:o}=n;return o?o(i):t===e.getSourceId()}endDrag(){const e=this.spec,t=this.monitor,n=this.connector,{end:i}=e;i&&i(t.getItem(),t),n.reconnect()}constructor(e,t,n){this.spec=e,this.monitor=t,this.connector=n}}function L(r,e,t){const n=s.useMemo(()=>new Y(r,e,t),[e,t]);return s.useEffect(()=>{n.spec=r},[r]),n}function W(r){return s.useMemo(()=>{const e=r.type;return c(e!=null,"spec.type must be defined"),e},[r])}function z(r,e,t){const n=p(),i=L(r,e,t),o=W(r);d(function(){if(o!=null){const[l,u]=H(o,i,n);return e.receiveHandlerId(l),t.receiveHandlerId(l),u}},[n,e,t,i,o])}function K(r,e){const t=M(r);c(!t.begin,"useDrag::spec.begin was deprecated in v14. Replace spec.begin() with spec.item(). (see more here - https://react-dnd.github.io/react-dnd/docs/api/use-drag)");const n=V(),i=F(t.options,t.previewOptions);return z(t,n,i),[b(t.collect,n,i),R(i),T(i)]}export{I as D,S as a,p as b,d as c,M as d,b as e,c as i,J as r,D as s,K as u,N as w};
